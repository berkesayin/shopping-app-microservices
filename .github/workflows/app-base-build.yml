name: App Base Build

on:
  workflow_call:
    inputs:
      service-name:
        required: true
        type: string
      java-version:
        required: true
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java ${{ inputs.java-version }}
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ inputs.java-version }}

      - name: Install Docker Compose
        run: |
          curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r .tag_name)/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Start Dependencies
        run: |
          docker compose -f docker-compose.dependencies.yml up --build --detach
          sleep 10 # Give services time to start
          docker ps
          docker logs configserver
          docker logs discovery
          docker logs postgres
          docker logs mongodb
          docker logs redis
          docker compose -f docker-compose.dependencies.yml ps

      - name: Run tests
        run: |
          cd services/${{ inputs.service-name }}
          ./mvnw test

      - name: Run checkstyle
        run: |
          cd services/${{ inputs.service-name }}
          ./mvnw checkstyle:check

      - name: Package Application
        run: |
           cd services/${{ inputs.service-name }}
           ./mvnw package -DskipTests

      - name: Build and Push Docker Image
        run: |
           cd services/${{ inputs.service-name }}
           IMAGE_NAME="berkesayin/${{ inputs.service-name }}"
           docker build -t "$IMAGE_NAME:latest" .
           docker push "$IMAGE_NAME:latest"

      - name: Stop Dependencies
        if: always()
        run: docker compose -f docker-compose.dependencies.yml down